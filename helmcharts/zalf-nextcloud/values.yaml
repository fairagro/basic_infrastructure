# oidc_login_provider_url: "https://keycloak.corki.bonares.de/realms/fairagro"
# #oidc_login_logout_url: "https://keycloak.corki.bonares.de/realms/fairagro/protocol/openid-connect/logout"
# oidc_login_logout_url: "https://nextcloud.corki.bonares.de/login"
# oidc_login_client_secret: "eoqeT1vQfBDoEDOEMEkRKul6BAF4aYSN"
oidc_login_client_id: nextcloud

# This is the collabora IP, possibly the external reverse proxy
allowed_collabora_ips: ~
# This should be set yo the 'kube_pods_subnet' variable in the kubespray group_vars file 'k8s-cluster.yml'.
allowed_reverse_proxy_ips: ~

postgres_storageClass: ~

# ## Liveness and readiness probe values
# ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
# ##
nextcloud:

  podSecurityContext:
    fsGroup: 5999 # user 'service_dis'
    fsGroupChangePolicy: OnRootMismatch

  image:
    # Here we're actually using a hack:
    # The nextcloud helm chart does not support specifying an image digest hash. So we rely on the fact
    # that the image name is built by concatenating the repository name and the tag, using a colon as separator.
    # Now we can simply add the @sha256 to the repository name and specify the image digest hash in the tag.
    # This works as long as the repository name is only referenced within the chart for generating the image name.
    repository: nextcloud@sha256
    favor: fpm
    # I would prefer to go for the fpm-alpine version, because it has much less vulnerabilities.
    # This requires to install nginx as sidecar container. But currently I receive HTTP 500 when trying this.
    #tag: 0b04a2e2c14672a2fe56ca668a633ed8fc9d2d882df83fdfc6114773f4713a74 # 28.0.2-apache
    tag: d0d13d935eaa9219bfa89fd8213b3ede6431e04685f0a25f6f764f5e5dcfe990 # 28.0.2-fpm-alpine
    pullPolicy: IfNotPresent

  ingress:
    enabled: true
    className: nginx-external
    annotations:
      cert-manager.io/issuer: geant
      cert-manager.io/private-key-size: "4096"
      cert-manager.io/private-key-rotation-policy: "Always"
      # It seems the subjects annotation do not have any effect.
      # Still we keep them...
      cert-manager.io/subject-countries: "DE"
      cert-manager.io/subject-organizations: "NFDI FAIRagro"
      cert-manager.io/subject-organizationalunits: "Measure 4.1"
      nginx.ingress.kubernetes.io/proxy-body-size: 128m
      nginx.ingress.kubernetes.io/cors-allow-headers: X-Forwarded-For
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/server-snippet: |-
        server_tokens off;
        proxy_hide_header X-Powered-By;
        rewrite ^/.well-known/webfinger /index.php/.well-known/webfinger last;
        rewrite ^/.well-known/nodeinfo /index.php/.well-known/nodeinfo last;
        rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
        rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json;
        location = /.well-known/carddav {
          return 301 $scheme://$host/remote.php/dav;
        }
        location = /.well-known/caldav {
          return 301 $scheme://$host/remote.php/dav;
        }
        location = /robots.txt {
          allow all;
          log_not_found off;
          access_log off;
        }
        location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
          deny all;
        }
        location ~ ^/(?:autotest|occ|issue|indie|db_|console) {
          deny all;
        }
    labels:
      app: nextcloud
    path: /
    pathType: Prefix

  nextcloud:
    datadir: /nextcloud_data
    containerPort: 8080

    securityContext:
      # runAsUser: 82
      # runAsGroup: 82
      # runAsNonRoot: true
      readOnlyRootFilesystem: false
      allowPrivilegeEscalation: false
      privileged: false
      # capabilities:
      #   add:
      #     - CAP_SETUID
      #   drop:
      #     - ALL

    podSecurityContext:
      fsGroup: 82
      fsGroupChangePolicy: OnRootMismatch

    extraEnv:
      # Fix the postgres connection issue
      # "could not open certificate file "/root/.postgresql/postgresql.crt": Permission denied"
      # according to https://meta.discourse.org/t/trouble-bootstrapping-with-rds-could-not-open-certificate-file/289367
      - name: PGSSLCERT
        value: /tmp/postgresql.crt

    extraVolumeMounts:
      # Script to install additional apps and configure nextcloud
      - name: installation-scripts
        mountPath: /docker-entrypoint-hooks.d/post-installation/post-installation.sh
        readOnly: true
        subPath: post-installation.sh
      # Wait until the postgres database is available, otherwise nextcloud setup will fail
      - name: installation-scripts
        mountPath: /docker-entrypoint-hooks.d/pre-installation/wait-for-postgresql.sh
        readOnly: true
        subPath: wait-for-postgresql.sh
      # Some additional templated config files
      - name: additional-config
        mountPath: /var/www/html/config/proxy.config.php
        subPath: proxy.config.php
      # - name: additional-config
      #   mountPath: /var/www/html/config/trusted_domains.config.php
      #   subPath: trusted_domains.config.php
    extraVolumes:
      - name: installation-scripts
        configMap:
          defaultMode: 0750
          name: nextcloud-installation-scripts
      - name: additional-config
        configMap:
          name: nextcloud-additional-config

    mail:
      enabled: true
      smtp:
        host: smtp.hostinger.com
        secure: starttls
        port: 587
        authtype: LOGIN

    configs:
      # Some additional non-templated config files
      misc.config.php: |
        <?php
        $CONFIG = array (
          'default_phone_region' => 'DE',
          'overwriteprotocol' => 'https',
          'check_data_directory_permissions' => false,
        );
      cron.config.php: |
        <?php
        $CONFIG = array (
          'maintenance_window_start' => 1,     // run background jobs at 1am
        );
      # proxy.config.php: |
      #   <?php
      #   $CONFIG = array (
      #     'trusted_proxies' => array(
      #       0 => '127.0.0.1',
      #       1 => '10.0.0.0/8',
      #     ),
      #     'forwarded_for_headers' => array('HTTP_X_FORWARDED_FOR'),
      #   );
      # {{- if and .Values.oidc_login_provider_url .Values.oidc_login_logout_url .Values.oidc_login_client_secret }}
      #   oidc.config.php: |-
      #     <?php
      #     $CONFIG = array (
      #       // Some Nextcloud options that might make sense here
      #       'allow_user_to_change_display_name' => false,
      #       'lost_password_link' => 'disabled',

      #       // URL of provider. All other URLs are auto-discovered from .well-known
      #       'oidc_login_provider_url' => '{{ .Values.oidc_login_provider_url }}',

      #       // Client ID and secret registered with the provider
      #       'oidc_login_client_id' => '{{ .Values.oidc_login_client_id }}',
      #       'oidc_login_client_secret' => '{{ .Values.oidc_login_client_secret }}',

      #       // Automatically redirect the login page to the provider
      #       'oidc_login_auto_redirect' => true,

      #       // Redirect to this page after logging out the user
      #       'oidc_login_logout_url' => '{{ .Values.oidc_login_logout_url }}',

      #       // If set to true the user will be redirected to the
      #       // logout endpoint of the OIDC provider after logout
      #       // in Nextcloud. After successfull logout the OIDC
      #       // provider will redirect back to 'oidc_login_logout_url' (MUST be set).
      #       'oidc_login_end_session_redirect' => true,

      #       // Quota to assign if no quota is specified in the OIDC response (bytes)
      #       //
      #       // NOTE: If you want to allow NextCloud to manage quotas, omit this option. Do not set it to
      #       // zero or -1 or ''.
      #       //'oidc_login_default_quota' => '1000000000',

      #       // Login button text
      #       'oidc_login_button_text' => 'Log in with OpenID',

      #       // Hide the NextCloud password change form.
      #       'oidc_login_hide_password_form' => true,

      #       // Use ID Token instead of UserInfo
      #       'oidc_login_use_id_token' => false,

      #       // Attribute map for OIDC response. Available keys are:
      #       //   * id:           Unique identifier for username
      #       //   * name:         Full name
      #       //                      If set to null, existing display name won't be overwritten
      #       //   * mail:         Email address
      #       //                      If set to null, existing email address won't be overwritten
      #       //   * quota:        Nextcloud storage quota
      #       //   * home:         Home directory location. A symlink or external storage to this location is used
      #       //   * ldap_uid:     LDAP uid to search for when running in proxy mode
      #       //   * groups:       Array or space separated string of NC groups for the user
      #       //   * login_filter: Array or space separated string. If 'oidc_login_filter_allowed_values' is
      #       //                      set, it is checked against these values.
      #       //   * photoURL:     The URL of the user avatar. The nextcloud server will download the picture
      #       //                      at user login. This may lead to security issues. Use with care.
      #       //                      This will only be effective if oidc_login_update_avatar is enabled.
      #       //   * is_admin:     If this value is truthy, the user is added to the admin group (optional)
      #       //
      #       // The attributes in the OIDC response are flattened by adding the nested
      #       // array key as the prefix and an underscore. Thus,
      #       //
      #       //     $profile = [
      #       //         'id' => 1234,
      #       //         'attributes' => [
      #       //             'uid' => 'myuid',
      #       //             'abc' => 'xyz'
      #       //         ],
      #       //         'list' => ['one', 'two']
      #       //     ];
      #       //
      #       // would become,
      #       //
      #       //     $profile = [
      #       //         'id' => 1234,
      #       //         'attributes' => [
      #       //             'uid' => 'myuid',
      #       //             'abc' => 'xyz'
      #       //         ],
      #       //         'attributes_uid' => 'myuid',
      #       //         'attributes_abc' => 'xyz',
      #       //         'list' => ['one', 'two'],
      #       //         'list_0' => 'one',
      #       //         'list_1' => 'two',
      #       //         'list_one' => 'one',
      #       //         'list_two' => 'two',
      #       //     ]
      #       //
      #       // https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims
      #       //
      #       // note: on Keycloak, OIDC name claim = "${given_name} ${family_name}" or one of them if any is missing
      #       //
      #       'oidc_login_attributes' => array (
      #           'id' => 'preferred_username',
      #           'name' => 'name',
      #           'mail' => 'email',
      #           //'quota' => 'ownCloudQuota',
      #           //'home' => 'homeDirectory',
      #           //'ldap_uid' => 'uid',
      #           'groups' => 'nextCloudGroups',
      #           //'login_filter' => 'nextCloudGroups',
      #           //'photoURL' => 'picture',
      #           //'is_admin' => 'ownCloudAdmin',
      #       ),

      #       // Default group to add users to (optional, defaults to nothing)
      #       //'oidc_login_default_group' => 'oidc',

      #       // DEPRECATED: This option will be removed in a future release. Use
      #       // 'login_filter' and 'oidc_login_filter_allowed_values' instead.
      #       //
      #       // Allow only users in configured group(s) to access Nextcloud. In case the user
      #       // is not assigned to this group (read from oidc_login_attributes) the login
      #       // will not be allowed for this user.
      #       //
      #       // Must be specified as an array of groups that are allowed to access Nextcloud.
      #       // e.g. 'oidc_login_allowed_groups' => array('group1', 'group2')
      #       'oidc_login_allowed_groups' => array('user', 'admin'),

      #       // Allow only users in configured value(s) to access Nextcloud. In case the user
      #       // is not assigned to this value (read from oidc_login_attributes) the login
      #       // will not be allowed for this user.
      #       //
      #       // Must be specified as an array of values (e.g. roles) that are allowed to
      #       // access Nextcloud. e.g. 'oidc_login_filter_allowed_values' => array('role1', 'role2')
      #       // 'oidc_login_filter_allowed_values' => array('user', 'admin'),

      #       // Use external storage instead of a symlink to the home directory
      #       // Requires the files_external app to be enabled
      #       'oidc_login_use_external_storage' => false,

      #       // Set OpenID Connect scope
      #       'oidc_login_scope' => 'profile email',    // the scope 'openid' is always added automatically

      #       // Run in LDAP proxy mode
      #       // In this mode, instead of creating users of its own, OIDC login
      #       // will get the existing user from an LDAP database and only
      #       // perform authentication with OIDC. All user data will be derived
      #       // from the LDAP database instead of the OIDC user response
      #       //
      #       // The `id` attribute in `oidc_login_attributes` must return the
      #       // "Internal Username" (see expert settings in LDAP integration)
      #       'oidc_login_proxy_ldap' => false,

      #       // Disable creation of users new to Nextcloud from OIDC login.
      #       // A user may be known to the IdP but not (yet) known to Nextcloud.
      #       // This setting controls what to do in this case.
      #       // - 'true' (default): if the user authenticates to the IdP but is not known to Nextcloud,
      #       //     then they will be returned to the login screen and not allowed entry;
      #       // - 'false': if the user authenticates but is not yet known to Nextcloud,
      #       //     then the user will be automatically created; note that with this setting,
      #       //     you will be allowing (or relying on) a third-party (the IdP) to create new users
      #       'oidc_login_disable_registration' => false,

      #       // Fallback to direct login if login from OIDC fails
      #       // Note that no error message will be displayed if enabled
      #       'oidc_login_redir_fallback' => false,

      #       // Use an alternative login page
      #       // This page will be php-included instead of a redirect if specified
      #       // In the example below, the PHP file `login.php` in `assets`
      #       // in nextcloud base directory will be included
      #       // Note: the PHP variable $OIDC_LOGIN_URL is available for redirect URI
      #       // Note: you may want to try setting `oidc_login_logout_url` to your
      #       // base URL if you face issues regarding re-login after logout
      #       'oidc_login_alt_login_page' => 'assets/login.php',

      #       // For development, you may disable TLS verification. Default value is `true`
      #       // which should be kept in production
      #       'oidc_login_tls_verify' => false,

      #       // If you get your groups from the oidc_login_attributes, you might want
      #       // to create them if they are not already existing, Default is `false`.
      #       'oidc_create_groups' => true,

      #       // Enable use of WebDAV via OIDC bearer token.
      #       'oidc_login_webdav_enabled' => false,

      #       // Enable authentication with user/password for DAV clients that do not
      #       // support token authentication (e.g. DAVx⁵)
      #       'oidc_login_password_authentication' => false,

      #       // The time in seconds used to cache public keys from provider.
      #       // The default value is 1 day.
      #       'oidc_login_public_key_caching_time' => 86400,

      #       // The minimum time in seconds to wait between requests to the jwks_uri endpoint.
      #       // Avoids that the provider will be DoSed when someone requests with unknown kids.
      #       // The default is 10 seconds.
      #       'oidc_login_min_time_between_jwks_requests' => 10,

      #       // The time in seconds used to cache the OIDC well-known configuration from the provider.
      #       // The default value is 1 day.
      #       'oidc_login_well_known_caching_time' => 86400,

      #       // If true, nextcloud will download user avatars on login.
      #       // This may lead to security issues as the server does not control
      #       // which URLs will be requested. Use with care.
      #       'oidc_login_update_avatar' => false,

      #       // If true, the default Nextcloud proxy won't be used to make internals OIDC call.
      #       // The default is false.
      #       'oidc_login_skip_proxy' => false,

      #       // Code challenge method for PKCE flow.
      #       // Possible values are:
      #       //	- 'S256'
      #       //	- 'plain'
      #       // The default value is empty, which won't apply the PKCE flow.
      #       'oidc_login_code_challenge_method' => '',
      #     );
      # {{- end }}

  resources:
    limits:
      cpu: 2
      memory: 4Gi
    requests:
      cpu: 2
      memory: 4Gi

  livenessProbe:
    enabled: true
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  startupProbe: # the entrypoint copies 600MB data to the NFS volumes which may take some time
    enabled: true
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 300
    successThreshold: 1

  # ## Enable persistence using Persistent Volume Claims
  # ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  # ##
  persistence:
    # #   # Nextcloud Data (/var/www/html)
    enabled: true
    storageClass: nfs-csi-delete
    # we setup an additional volume for the nextcloud data according to the hardening guide:
    # https://docs.nextcloud.com/server/28/admin_manual/installation/harden_server.html
    # NOTE: I did not succeed to set the required permissions 0770 for the additional nextcloud
    # data mount. So I disabled it for now.
    nextcloudData:
      enabled: true
      storageClass: nfs-csi-delete

  nginx:
    enabled: true
    image:
      repository: nginxinc/nginx-unprivileged@sha256
      # tag: cb0953165f59b5cf2227ae979a49a2284956d997fad4ed7a338eebc6aef3e70b # 1.25.4-alpine2.18
      tag: a2e2a031969b6fc6107537901a04c354b38e1708ba3a5e1042b390277b55780e # 1.25.4-bookworm -- there are no alpine versions of unprivileged nginx images
      pullPolicy: IfNotPresent
    containerPort: 8080
    config:
      default: true
      custom: |-
        types {
          text/javascript mjs;
        }
    # securityContext:
    #   runAsNonRoot: true
    #   allowPrivilegeEscalation: false
    #   privileged: false
    #   capabilities:
    #     add:
    #       - CAP_NET_BIND_SERVICE

  internalDatabase:
    enabled: false

  externalDatabase:
    enabled: true
    type: postgresql
    host: fairagro-postgresql-nextcloud
    database: nextcloud
    existingSecret:
      enabled: true
      secretName: nextcloud.fairagro-postgresql-nextcloud.credentials.postgresql.acid.zalan.do
      usernameKey: username
      passwordKey: password

  cronjob:
    enabled: true
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
    # securityContext:
    #   runAsUser: 0
    #   runAsGroup: 0
    #   runAsNonRoot: false
    #   readOnlyRootFilesystem: true

  redis:
    enabled: true
    image:
      registry: docker.io
      repository: bitnami/redis # bitnami redis as this is what the nextcloud helm chart uses by default
      digest: sha256:413ba6ab7104ced40c1047451680f0679b235684a14a7db4a05a5990ff4e1e67 # 7.2.4-debian-12-r9
    auth:
      enabled: true
      password: ~
    architecture: standalone
    master:
      resources:
        requests:
          cpu: 1
          memory: 512Mi
        limits:
          cpu: 1
          memory: 512Mi
      persistence:
        enabled: false

#################################
### Collabora Online Settings ###
#################################
collabora-online:
  image:
    repository: collabora/code@sha256
    tag: e0c7ff3cf4ccd49a590980cf83f46f8efd9456f9d173f92d1acfd3f41be09319 # 23.05.9.1.1
    pullPolicy: IfNotPresent

  autoscaling:
    enabled: false

  securityContext:
    capabilities:
      add:
        - MKNOD

  collabora:
    aliasgroups:
      - host: ~
    extra_params: --o:ssl.enable=false --o:ssl.termination=true
    server_name: ~

  resources:
    limits:
      cpu: "1800m"
      memory: "2000Mi"
    requests:
      cpu: "1800m"
      memory: "2000Mi"

  ingress:
    enabled: true
    className: nginx-external
    annotations:
      cert-manager.io/issuer: geant
      cert-manager.io/private-key-size: "4096"
      cert-manager.io/private-key-rotation-policy: "Always"
      # It seems the subjects annotation do not have any effect.
      # Still we keep them...
      cert-manager.io/subject-countries: "DE"
      cert-manager.io/subject-organizations: "NFDI FAIRagro"
      cert-manager.io/subject-organizationalunits: "Measure 4.1"
      nginx.ingress.kubernetes.io/upstream-hash-by: "$arg_WOPISrc"
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
      # block admin urls from outside
      nginx.ingress.kubernetes.io/server-snippet: |
        location /cool/getMetrics { deny all; return 403; }
        location /cool/adminws/ { deny all; return 403; }
        location /browser/dist/admin/admin.html { deny all; return 403; }
    hosts: ~
    tls: ~
