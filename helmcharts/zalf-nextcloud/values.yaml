# oidc_login_provider_url: "https://keycloak.corki.bonares.de/realms/fairagro"
# #oidc_login_logout_url: "https://keycloak.corki.bonares.de/realms/fairagro/protocol/openid-connect/logout"
# oidc_login_logout_url: "https://nextcloud.corki.bonares.de/login"
# oidc_login_client_secret: "eoqeT1vQfBDoEDOEMEkRKul6BAF4aYSN"
oidc_login_client_id: nextcloud

# tls:
#   certificate:
#   key:

# ## Liveness and readiness probe values
# ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
# ##
nextcloud:
  image:
    # Here we're actually using a hack:
    # The nextcloud helm chart does not support specifying an image digest hash. So we rely on the fact
    # that the image name is built by concatenating the repository name and the tag, using a colon as separator.
    # Now we can simply add the @sha256 to the repository name and specify the image digest hash in the tag.
    # This works as long as the repository name is only referenced within the chart for generating the image name.
    repository: nextcloud@sha256
    # I would prefer to go for the fpm-alpine version, because it has much less vulnerabilities.
    # This requires to install nginx as sidecar container. But currently I receive HTTP 500 when trying this.
    tag: 0b04a2e2c14672a2fe56ca668a633ed8fc9d2d882df83fdfc6114773f4713a74 # 28.0.2-apache
    pullPolicy: IfNotPresent

  nextcloud: {}
    # securityContext:
    #   runAsUser: 1001
    #   runAsGroup: 1001
    #   fsGroup: 1001

  livenessProbe:
    enabled: true
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  startupProbe: # the entrypoint copies 600MB data to the NFS volumes which may take some time
    enabled: true
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 500
    successThreshold: 1

  # ## Enable persistence using Persistent Volume Claims
  # ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  # ##
  persistence:
    # #   # Nextcloud Data (/var/www/html)
    enabled: true
    # #   annotations: {}
    # #   ## nextcloud data Persistent Volume Storage Class
    # #   ## If defined, storageClassName: <storageClass>
    # #   ## If set to "-", storageClassName: "", which disables dynamic provisioning
    # #   ## If undefined (the default) or set to null, no storageClassName spec is
    # #   ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    # #   ##   GKE, AWS & OpenStack)
    # #   ##
  #  storageClass: nfs-client

  # nginx:
  #   enabled: true
  #   image:
  #     repository: nginx@sha256
  #     tag: cb0953165f59b5cf2227ae979a49a2284956d997fad4ed7a338eebc6aef3e70b # 1.25.4-alpine2.18
  #     pullPolicy: IfNotPresent

  internalDatabase:
    enabled: false

  externalDatabase:
    enabled: true
    type: postgresql
    host: fairagro-postgresql-nextcloud
    database: nextcloud
    existingSecret:
      enabled: true
      secretName: nextcloud.fairagro-postgresql-nextcloud.credentials.postgresql.acid.zalan.do
      usernameKey: username
      passwordKey: password

    # extraEnv:
    #   PGSSLMODE: require
    #   PGSSLCERT: /etc/tls/tls.crt
    #   PGSSLKEY: /etc/tls/tls.key
